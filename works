var JDBC = require('jdbc');
var Promise = require("bluebird");
var jinst = require('jdbc/lib/jinst');
const express = require('express')
const app = express()
const port = 3000
var pools = require("./pools")


if (!jinst.isJvmCreated()) {
    jinst.addOption("-Xrs");
    jinst.setupClasspath(['./drivers/mysql-connector-java-8.0.15.jar']);
  }


var config = {
  // Required
  url: 'jdbc:mysql://db4free.net/broccoli22',
  // Optional
  drivername: 'com.mysql.cj.jdbc.Driver',
  minpoolsize: 10,
  maxpoolsize: 100,
  user: 'timur123',
  password: 'wFvRRRBrGjzxu7K',
  properties: {}
};
 
 
var jdbcdb = new JDBC(config);

jdbcdb.initialize(function(err) {
    if (err) {
        console.log(err);
    }
});



 function connect() {
    return new Promise((resolve,reject) => {
        jdbcdb.reserve(function(err, connObj) {
            resolve(connObj.conn);
        })
    })
 }

 function execStatement(conn,query) {
    return new Promise((resolve,reject) => {
        conn.createStatement(function(err, statement) {
            statement.executeQuery(query, function(err, resultset) {
                resultset.toObjArray(function(err, results) {
                    console.log(JSON.stringify(results));
                    resolve(JSON.stringify(results))
                });
            }); 
        });
    })
 }


async function test(query="select * from broccoli22.items") {
    //"select * from broccoli22.items"
    const conn = await connect()
    const st = await execStatement(conn, query)
    return st
}

const conn = jdbcdb.reserve()
app.get('/', async (req, res) => {
    a = await test()
    res.send(a)
})

app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))